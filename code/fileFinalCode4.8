#!/bin/bash
#alle code in een file
# deze versie moet werken,
# draaiend 4.8
# (we proberen de nummering)
# gelijk te houden aan de kernel
# leuk voor de eindgebruiker of zo; o ja dit werkt niet met [da]sh enkel bash en zsh support
# Dit shellScript heeft precies 240 regels
cd $1
date>time
cp ../sequenties_groep_14.fa .
  #1 Download het rna.fa bestand van de Alligator sinensis.
  wget -q ftp://ftp.ncbi.nlm.nih.gov/genomes/Alligator_sinensis/RNA/rna.fa.gz
 #2 Pak het gedownloade bestand uit.
 gunzip rna.fa.gz

#3 Maak er een database van.
formatdb -pF -i rna.fa 
echo een
 #4 Blast elke sequentie in sequenties_groep_14.fa tegen de database en selecteert het XM_nummer van de best scorende alignment en zet deze in het bestand XM_nummers.
 blastall -d rna.fa -i sequenties_groep_14.fa -p blastn -m9 | awk 'BEGIN{b=1}{if(substr($1,7,1)==b){print $1 "  " $2 "  "$NF;b+=1} else if (substr($1,6,2)==b){print $1 "  " $2 "  " $NF ; b+=1}}' | tr "|" " " | awk '{print $5}' > XM_nummers
echo klaarGeblast
#5 Alle unique XM nummers uit bestand XM_nummers worden in bestand enkele_xm_nummer gezet.

 cat XM_nummers | sort | uniq > enkele_xm_nummers
echo twee
#6 Download elke NCBI pagina van het gen wat hoort bij de XM_nummers en zet deze in bestand "ncbi_page_file".

 cat enkele_xm_nummers | sed 's!\(.*\).*!http://www.ncbi.nlm.nih.gov/gene/?term=&!g'| wget -i- -q -O ncbi_page_file

#7 Uit het bestand ncbi_page_file worden alle regels genomen met <titel>.In deze regel staat alle informatie van de naam van het gen.


cat ncbi_page_file| egrep "<title>" > alle_titels
 #8 Uit alle titel regels wordt de gennaam geselecteerd en in een bestand gezet.
 cat alle_titels | awk '{print $1}' |  cut -b8-66 > alle_genen_op_naam

 # DEZE MOET ANDERS!!! moet aan gen id gekoppeld worden.
 #9 Zet bestand enkele_xm_nummers en alle_genen_op_naam naast elkaar neer in bestand Lijst_gen_code_en_naam.
 pr -m -t -J enkele_xm_nummers alle_genen_op_naam  > Lijst_gen_code_en_naam


#opnieuw  LETOP
# koppelt dit genen aan eiwitten
 # DEZE MOET ANDERS!!! hoeven alleen xp nummer uit tekomen.
 #10 In het bestand ncbi_page_file wordt gezocht op de accesion code voor het eiwit. Ook wordt er gezocht bij welk gen de eiwitten horen
 cat ncbi_page_file|egrep -o "XP_[0-9]{9}.[0-9]|<title>.*"|awk '{print $1}' | tr -d "\<title\>" > test_klaar

 #11 Uit bestand test_klaar worden alle enkele XP_nummers in bestand XP_nummers gezet.

 cat test_klaar |egrep XP|sort|uniq > XP_nummers

 #12 Geeft van alle XP_nummers de ncbi site. Op elke site wordt gezocht naar het bijbehorende eiwitnaam. De eiwit namen worden hiervan in een bestand gezet genaamd eiwit_namen.
 cat XP_nummers | sed 's!\(.*\).*!http://www.ncbi.nlm.nih.gov/protein/?term=&!g'| wget -i- -q -O- | egrep "<title>" | awk -F"- " '{print $1}' | cut -d [ -f 1 | awk -v N=2 '{sep=""; for (i=N; i<=NF; i++) {printf("%s%s",sep,$i); sep=OFS}; printf("\n")}' > eiwit_namen

 #13 Zet bestand XP_nummers en eiwit_namen naast elkaar neer in bestand Lijst_eiwit_code_en_naam.
 pr -m -t -J XP_nummers eiwit_namen  > Lijst_eiwit_code_en_naam
#EXONEN
#1 Download elke NCBI pagina van de exonen die horen bij het gen wat hoort bij de XM_nummers.
 #1 geeft alle info van exon table per XM.
 cat enkele_xm_nummers | sed 's!\(.*\).*!https://www.ncbi.nlm.nih.gov/gene/?term=&\&report=gene_table\&format=text!g'| wget -i- -q -O gen_table_files_ncbi

 #2 Geeft van elke exon het start en stop locatie. Deze wordt gekoppeld aan een RNA accesion (XM nummer) en eiwit accesion (XP nummer). Alles wordt weggeschreven naar exonen_sven.
 cat gen_table_files_ncbi|egrep "[0-9]-[0-9]|XM_[0-9]{9}|XP_[0-9]{8}|XR_[0-9]|GENE" |egrep exons -v|tr " " -d|awk '{print $1}'|egrep "<" -v| sed 's/Exon-table-for\-\-mRNA\-\-//g'| sed 's/\-and\-protein\-/\t/g' | awk 'BEGIN{B = "test"} {if(substr($0, 1, 1) == "X" || substr($0, 1, 1) == "E"){B = $0;} else {print($0 "\t" B);};}' > exonen_sven

 #3 Alle XM nummers uit exonen_sven worden geselecteerd en naar XM_tabel_2 geschreven.
 cat exonen_sven | awk '{print $2}' | sort | uniq | awk '{if(substr($0, 1, 1) != "E"){print $0}}' > XM_tabel_2
#-----------------------------------------------------------------------------------
# INFO KEG , pathway, EC
# Eiwit aan ASN code koppelen.

#1 Er worden 3 files gedownload. De eerst heeft de keg code gekoppeld aan het eiwit accesion. De tweede heeft elke keg code gekoppeld aan een of meer EC. De laatste heeft elke keg code gekoppeld aan een of meer pathways.
 wget -q http://rest.kegg.jp/conv/ncbi-proteinid/asn -O xp_naar_asn
 wget -q http://rest.kegg.jp/link/asn/enzyme -O ASN_code_met_EC
 wget -q http://rest.kegg.jp/link/asn/pathway -O ASN_code_met_pathway

#2 Van alle xp nummers uit XP_nummers word het versie nummer er van af gehaald en in bestand XP_nummers_zonder_versie gezet. 
cat XP_nummers | awk -F. '{print $1}' > XP_nummers_zonder_versie

#3 In het bestand xp_naar_asn wordt gezocht met de xp nummers naar KEGG codes.
cat xp_naar_asn | egrep -f XP_nummers_zonder_versie  > asn_id_GEKOPPELD_MET_XPnummer

#4 De eerste kolom van asn_id_GEKOPPELD_MET_XPnummer waar alle asn ids in staan worden geselecteerd en in alleen_asn_id gezet.
cat asn_id_GEKOPPELD_MET_XPnummer|awk '{print $1}'> alleen_asn_id
#4.5 maak een database import aan
sed `tr \\\\t :<asn_id_GEKOPPELD_MET_XPnummer|cut -d\: -f 1\ 2\ 4|sed -r 's@:XP@\ XP@;s/(.+?) (.+?)/ -e s\/\1\/\2\//'|tr -d \\\n` ASN_code_met_EC|grep XP | cut -d\: -f2|tr \\t \$|awk -F\$ '{print $2"$"$1}'> ECKoppelMoter
# 4.5.5 maakt een koppeltabel tussen asn in eiwit en pathway naam
sed $(cat asn_id_GEKOPPELD_MET_XPnummer| sed 's/\(asn:[0-9]*\)\tncbi-proteinid:\(.*\)/s\/\1\/\2\/;/' | tr -d \\n) Pathway_met_ASN|tr \\t ^ > asnkoppelpathwayMoter
#5 Alle KEGG site van de asn ids worden gedownload en in  bestand alle_kegg_site gezet.
cat  alleen_asn_id |sed 's%.*%http://rest.kegg.jp/get/&%'| wget -i- -q  -O alle_kegg_site
# PATHWAY

#6 zet het tabel in een db importeerbaar formaat
tr \\t : < Pathway_met_ASN|cut -d: -f2\ 4|cut -c4- > pathwayMoter
#7 Pakt uit bestand Pathway_met_ASN de eerste kolom (alle pathways) en zet alle unieke in een bestand; alle_enkele_pathways.

#10
cat ASN_code_met_pathway | egrep -f alleen_asn_id |sort | sed 's/path://g' > Pathway_met_ASN
#11
cat Pathway_met_ASN |awk '{print $1}'|sort|uniq > alle_enkele_pathways
#8
cat ASN_code_met_EC | egrep -f alleen_asn_id |sort| sed 's/ec://g' > EC_code_met_ASN

#8 Zoekt met de pathways in bestand alle_kegg_site en selecteert elke naam van een pathway.
#12
 cat  alleen_asn_id |sed 's%.*%http://rest.kegg.jp/get/&%'| wget -i- -O alle_kegg_site -q
 cat alle_kegg_site | egrep -f alle_enkele_pathways |sed s/PATHWAY//g |sort|uniq|awk '{print $1 "@" $2 " "  $3 " " $4 " "$5 " " $6}'| tr @ \\t > pathwaycode_met_pathwaynaam
 #13
cat pathwaycode_met_pathwaynaam |cut -c4- |tr \\t %|uniq > pathwayOutput
#EC code
 #9
 cat alle_kegg_site | grep -o -P '(?<=\[).*(?=\])'|egrep "EC"|tr " " "\n"| tr -d "EC:" > alle_EC_nummers
 
 #11 Het zelfde als bij 10 alleen word er gezocht op de reactie naam van de EC. Hierbij wordt gezocht tussen "K[0-9]{5}" en "[".
 cat alle_kegg_site | grep -o -P '(?<=K[0-9]{5}).*(?=\[)'| tr "/" "\n"| awk '{if(substr($0,1,2)=="  "){print substr($0,3,length($0))}else if(substr($0,1,1)==" "){print substr($0,2,length($0))}   else{print $0}}' > alle_ec_namen
 echo deze
 #12 weet ik niet
 pr -m -t -J alle_EC_nummers alle_ec_namen  | sort -u -k1,1 | tr \\t \~ > test_ec_naam

 #1 ophalen van proteoom van het organisme
 wget -q ftp://ftp.ncbi.nlm.nih.gov/genomes/Alligator_sinensis/protein/protein.fa.gz
 #2 gunzippen van het bestand
 gunzip protein.fa.gz
 #3 tekst bestand met de eiwit sequentie, accession code, naam en asn code van onze eiwitten(waardes zijn gescheden met meerdere kaasjes)
 cat protein.fa | tr -d '\n' | sed 's/>/\n&/g' | egrep -f XP_nummers | sed 's/]/&\n/g' | awk -F\| '{if (NF == 1) {print $0} else {split($5, a, "[");print $4"kaasje"a[1]"kaasje"}}' | tr -d \\n | sed 's/XP_/\n&/g' | tail -n +2  |sed `cat protein.fa | tr -d '\n' | sed 's/>/\n&/g' | egrep -f XP_nummers | sed 's/]/&\n/g' | awk -F\| '{if (NF == 1) {print $0} else {split($5, a, "[");print $4"kaasje"a[1]"kaasje"}}' | tr -d \\n | sed 's/XP_/\n&/g' | tail -n +2  | awk -F"kaasje" '{split($1, a, "."); print a[1]}' | grep -f - xp_naar_asn| tr '\t' : | cut -d\: -f4\ 2 | awk -F":" '{printf " -e s/"$2".*/&kaasje"$1"/g"}'` -e s/kaasje/\#/g | awk -F\# '{if (NF==3){print $0,"NULL"}else{print $0}}' |awk -F\# '{if (NF==3){print $1"#"$2"#"$3;}else{print $0}}'| sed 's/NULL/#NULL/g'>proTijdelijk
#GEN ID met XM

#1

 cat XM_tabel_2 | sed 's!\(.*\).*!http://www.ncbi.nlm.nih.gov/gene/?term=&!g'| wget -q -i- -O files_ncbi_voor_genid
 cat files_ncbi_voor_genid |egrep "Gene ID: [0-9]{9}" -o >alle_gen_id
 #2
 pr -m -t XM_tabel_2 alle_gen_id > xm_met_gen_id
#if [ -e gen_table_gen ]
#then
 echo exon\^gen is al opgezocht
#else
 #1 geeft alle info van exon table per gen.
 # sorry jongens voor de for loop ik was te lui :-<
 #cat alle_gen_id | cut -d\  -f3 | sed 's!\(.*\).*!https://www.ncbi.nlm.nih.gov/gene/?term=&\&report=gene_table\&format=text!g' ###| 
 for gen in `cat alle_gen_id | cut -d\  -f3|sort| uniq`
 do
  #echo $gen
  echo ":@:"$gen >> gen_table_gen
  wget https://www.ncbi.nlm.nih.gov/gene/\?term\=$gen\&report=gene_table\&format=text -q -O- |tr " " -d|awk '{print $1}'|egrep "<" -v| grep -v RNA | awk 'BEGIN{B = "test"} {if(substr($0, 1, 1) == "X" || substr($0, 1, 1) == "E"){B = $0;} else {print($0 "\t" B);};}'|egrep "[0-9]-[0-9]|XM_[0-9]{9}|XP_[0-9]{8}|XR_[0-9]|GENE" |egrep exons -v|tr " " -d|awk '{print $1}'|egrep "<" -v| sed 's/Exon-table-for\-\-mRNA\-\-//g'| sed 's/\-and\-protein\-/\t/g' | grep -v $'\\---\nXR\nGenomic-Interval' >> gen_table_gen
done
# ik baal er een beetje van dat ik aan het einde een sort uniq moet doen
# gelukkig hebben we pizza
grep -vf - <<< $'Genomic-Interval-Exon\nExon table\n----------------' gen_table_gen | awk 'BEGIN{a="";b=""}{if (substr($1, 1, 1) == ":") {a=substr($0, 4)} else {if (substr($1, 0, 2) == "XM") {b=$0} else {if ($0 != " "){print a,b,$0}}}}' | sed 's/Exon-table-for\-\-mRNA\-\-//g'| sed 's/\-and\-protein\-/\t/g' | awk '{if (NF == 3) {print $1,$3} else {print $1, $2}}' | tr - \  | awk 'BEGIN{q[0]="";c=1}{m="false";for (w in q) {if (q[w]==$0){m="true"}} if (m=="false") {q[c]=$0;c++;print $0}}' | awk 'BEGIN{kaas="";pizza=1}{if ($1 == kaas){pizza++}else{pizza=1;kaas=$1} print pizza,$1, $2,$3}' | tr - \  >dataStuffExon
egrep -v RNA exonen_sven | egrep XM | tr - \  > exonen_sven_fout_maar_ook_goed
sed "$(sed $(cat xm_met_gen_id | awk '{printf "s/"$1"/"$4"/;"}') exonen_sven_fout_maar_ook_goed|sed -r 's/([0-9]*) ([0-9]*)\t([0-9]*)\t(.*)/s\/\3 \1 \2\/\& \4\/\;/'|tr -d \\n)" dataStuffExon|awk '{split($0,q," ");while (length(q) > 5){print q[1],q[2],q[3],q[4],q[length(q)];delete q[length(q)]}}'|awk '{print $1"%"$2"%"$5 }'| sort|uniq > genEiwitExon
 #2 geeft alle exonen met gen
#fi
# maak een bestand die tabellen combineert
echo -n "sed -i "> alexanderShulginakawillem
# dit kan nog korter;doen we later
sed -r ':kaas 
s/(XM_[0-9]*\.[0-9])[\t ]*Gene ID: ([0-9]*)/-e "s{\1{\2{"/g' <<<`awk '{if (NF==4){print $0}}'<xm_met_gen_id` | sed -e ':a;N;$!ba;s/\n/ /g' | sed 's/$/ exonen_sven/' >> alexanderShulginakawillem
chmod +x alexanderShulginakawillem
./alexanderShulginakawillem
rm alexanderShulginakawillem
cat XM_nummers | sort | uniq | sed 's@.*@http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore\&id=&\&retmode=text@' | wget -O- -i- -q | egrep GeneID -A3 | egrep '[0-9]{9}' -o | sort | uniq > gene_ids
webPage=`cat gene_ids | sed 's@.*@https://www.ncbi.nlm.nih.gov/gene/?term=&@g' | wget -O- -i- -q | sed 's/>/\n/g'`
grep span <<< "$webPage" | grep \\.\\. | grep -v \\.\\.\\. | cut -d\< -f1 > genPositie
grep \/title <<< "$webPage" | cut -d\  -f1 > genenMetNaam
pr -Jmt genPositie gene_ids genenMetNaam | awk '{split($1, a, ".");print $(NF-1), $NF, "NULL"}' > genIDLength
date >> time
